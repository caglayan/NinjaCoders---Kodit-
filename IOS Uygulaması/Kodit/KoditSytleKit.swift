//
//  KoditSytleKit.swift
//  KoditIOS
//
//  Created by Caglayan on 11/09/2017.
//  Copyright Â© 2017 Kodit. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class KoditSytleKit : NSObject {

    //// Cache

    private struct Cache {
        static let fruit_yellow: UIColor = UIColor(red: 0.943, green: 0.768, blue: 0.191, alpha: 1.000)
        static let fruit_blue: UIColor = UIColor(red: 0.444, green: 0.763, blue: 0.987, alpha: 1.000)
        static let mainBackground: UIColor = UIColor(red: 0.555, green: 0.173, blue: 0.801, alpha: 1.000)
        static var imageOfKoditName: UIImage?
        static var koditNameTargets: [AnyObject]?
    }

    //// Colors

    @objc dynamic public class var fruit_yellow: UIColor { return Cache.fruit_yellow }
    @objc dynamic public class var fruit_blue: UIColor { return Cache.fruit_blue }
    @objc dynamic public class var mainBackground: UIColor { return Cache.mainBackground }

    //// Drawing Methods

    @objc dynamic public class func drawKoditName(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 860, height: 215), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 860, height: 215), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 860, y: resizedFrame.height / 215)


        //// Color Declarations
        let fillColor = UIColor(red: 0.949, green: 0.757, blue: 0.180, alpha: 1.000)
        let fillColor2 = UIColor(red: 0.443, green: 0.765, blue: 1.000, alpha: 1.000)
        let fillColor3 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let fillColor4 = UIColor(red: 0.620, green: 0.255, blue: 0.651, alpha: 1.000)
        let fillColor5 = UIColor(red: 0.922, green: 0.188, blue: 0.318, alpha: 1.000)
        let fillColor6 = UIColor(red: 0.204, green: 0.286, blue: 0.369, alpha: 1.000)

        //// koditNameGroup
        //// iPad-Landscape
        //// K Drawing
        let kPath = UIBezierPath()
        kPath.move(to: CGPoint(x: 145.97, y: 162.42))
        kPath.addCurve(to: CGPoint(x: 150.09, y: 154.61), controlPoint1: CGPoint(x: 149.14, y: 161.31), controlPoint2: CGPoint(x: 150.97, y: 157.92))
        kPath.addCurve(to: CGPoint(x: 145.64, y: 150.05), controlPoint1: CGPoint(x: 149.48, y: 152.34), controlPoint2: CGPoint(x: 147.74, y: 150.67))
        kPath.addLine(to: CGPoint(x: 77.28, y: 110.59))
        kPath.addCurve(to: CGPoint(x: 73.62, y: 96.93), controlPoint1: CGPoint(x: 72.5, y: 107.83), controlPoint2: CGPoint(x: 70.86, y: 101.72))
        kPath.addLine(to: CGPoint(x: 113.36, y: 28.1))
        kPath.addCurve(to: CGPoint(x: 114.44, y: 26.23), controlPoint1: CGPoint(x: 113.82, y: 27.54), controlPoint2: CGPoint(x: 114.19, y: 26.91))
        kPath.addLine(to: CGPoint(x: 114.58, y: 25.98))
        kPath.addLine(to: CGPoint(x: 114.57, y: 25.92))
        kPath.addCurve(to: CGPoint(x: 114.56, y: 25.89), controlPoint1: CGPoint(x: 114.56, y: 25.91), controlPoint2: CGPoint(x: 114.56, y: 25.9))
        kPath.addCurve(to: CGPoint(x: 114.63, y: 22.28), controlPoint1: CGPoint(x: 114.91, y: 24.75), controlPoint2: CGPoint(x: 114.96, y: 23.51))
        kPath.addCurve(to: CGPoint(x: 107.15, y: 17.57), controlPoint1: CGPoint(x: 113.74, y: 18.97), controlPoint2: CGPoint(x: 110.46, y: 16.95))
        kPath.addLine(to: CGPoint(x: 107.15, y: 17.55))
        kPath.addLine(to: CGPoint(x: 102.32, y: 18.85))
        kPath.addCurve(to: CGPoint(x: 102.31, y: 18.85), controlPoint1: CGPoint(x: 102.32, y: 18.85), controlPoint2: CGPoint(x: 102.31, y: 18.85))
        kPath.addLine(to: CGPoint(x: 7.67, y: 44.21))
        kPath.addCurve(to: CGPoint(x: 0.59, y: 56.46), controlPoint1: CGPoint(x: 2.33, y: 45.64), controlPoint2: CGPoint(x: -0.84, y: 51.12))
        kPath.addLine(to: CGPoint(x: 34.23, y: 182.03))
        kPath.addCurve(to: CGPoint(x: 46.49, y: 189.1), controlPoint1: CGPoint(x: 35.67, y: 187.37), controlPoint2: CGPoint(x: 41.15, y: 190.53))
        kPath.addLine(to: CGPoint(x: 141.13, y: 163.74))
        kPath.addCurve(to: CGPoint(x: 141.14, y: 163.74), controlPoint1: CGPoint(x: 141.14, y: 163.74), controlPoint2: CGPoint(x: 141.14, y: 163.74))
        kPath.addLine(to: CGPoint(x: 145.97, y: 162.44))
        kPath.addLine(to: CGPoint(x: 145.97, y: 162.42))
        kPath.close()
        kPath.usesEvenOddFillRule = true
        fillColor.setFill()
        kPath.fill()


        //// o Drawing
        let oPath = UIBezierPath(ovalIn: CGRect(x: 154, y: -1, width: 150, height: 150))
        fillColor2.setFill()
        oPath.fill()


        //// d Drawing
        let dPath = UIBezierPath()
        dPath.move(to: CGPoint(x: 361.42, y: 212.14))
        dPath.addCurve(to: CGPoint(x: 362.68, y: 212.49), controlPoint1: CGPoint(x: 361.84, y: 212.26), controlPoint2: CGPoint(x: 362.26, y: 212.38))
        dPath.addCurve(to: CGPoint(x: 447.78, y: 157.64), controlPoint1: CGPoint(x: 398.96, y: 222.21), controlPoint2: CGPoint(x: 437.06, y: 197.65))
        dPath.addCurve(to: CGPoint(x: 401.51, y: 67.6), controlPoint1: CGPoint(x: 458.5, y: 117.63), controlPoint2: CGPoint(x: 437.78, y: 77.32))
        dPath.addCurve(to: CGPoint(x: 400.24, y: 67.27), controlPoint1: CGPoint(x: 401.08, y: 67.49), controlPoint2: CGPoint(x: 400.66, y: 67.38))
        dPath.addCurve(to: CGPoint(x: 399.73, y: 67.12), controlPoint1: CGPoint(x: 400.07, y: 67.22), controlPoint2: CGPoint(x: 399.9, y: 67.17))
        dPath.addLine(to: CGPoint(x: 345.48, y: 52.59))
        dPath.addCurve(to: CGPoint(x: 333.23, y: 59.66), controlPoint1: CGPoint(x: 340.15, y: 51.16), controlPoint2: CGPoint(x: 334.66, y: 54.33))
        dPath.addLine(to: CGPoint(x: 299.59, y: 185.23))
        dPath.addCurve(to: CGPoint(x: 306.66, y: 197.48), controlPoint1: CGPoint(x: 298.16, y: 190.57), controlPoint2: CGPoint(x: 301.32, y: 196.05))
        dPath.addLine(to: CGPoint(x: 360.91, y: 212.01))
        dPath.addCurve(to: CGPoint(x: 361.42, y: 212.14), controlPoint1: CGPoint(x: 361.08, y: 212.06), controlPoint2: CGPoint(x: 361.25, y: 212.1))
        dPath.close()
        dPath.usesEvenOddFillRule = true
        fillColor3.setFill()
        dPath.fill()


        //// d 2 Drawing
        let d2Path = UIBezierPath()
        d2Path.move(to: CGPoint(x: 549, y: 167.41))
        d2Path.addCurve(to: CGPoint(x: 550.31, y: 167.29), controlPoint1: CGPoint(x: 549.44, y: 167.37), controlPoint2: CGPoint(x: 549.87, y: 167.33))
        d2Path.addCurve(to: CGPoint(x: 610.09, y: 85.59), controlPoint1: CGPoint(x: 587.66, y: 163.36), controlPoint2: CGPoint(x: 614.42, y: 126.78))
        d2Path.addCurve(to: CGPoint(x: 534.63, y: 18.11), controlPoint1: CGPoint(x: 605.76, y: 44.39), controlPoint2: CGPoint(x: 571.98, y: 14.18))
        d2Path.addCurve(to: CGPoint(x: 533.33, y: 18.26), controlPoint1: CGPoint(x: 534.19, y: 18.15), controlPoint2: CGPoint(x: 533.76, y: 18.2))
        d2Path.addCurve(to: CGPoint(x: 532.8, y: 18.3), controlPoint1: CGPoint(x: 533.15, y: 18.27), controlPoint2: CGPoint(x: 532.98, y: 18.28))
        d2Path.addLine(to: CGPoint(x: 476.94, y: 24.17))
        d2Path.addCurve(to: CGPoint(x: 468.05, y: 35.16), controlPoint1: CGPoint(x: 471.46, y: 24.75), controlPoint2: CGPoint(x: 467.47, y: 29.67))
        d2Path.addLine(to: CGPoint(x: 481.63, y: 164.45))
        d2Path.addCurve(to: CGPoint(x: 492.62, y: 173.35), controlPoint1: CGPoint(x: 482.21, y: 169.95), controlPoint2: CGPoint(x: 487.13, y: 173.93))
        d2Path.addLine(to: CGPoint(x: 548.48, y: 167.48))
        d2Path.addCurve(to: CGPoint(x: 549, y: 167.41), controlPoint1: CGPoint(x: 548.66, y: 167.46), controlPoint2: CGPoint(x: 548.83, y: 167.44))
        d2Path.close()
        d2Path.usesEvenOddFillRule = true
        fillColor4.setFill()
        d2Path.fill()


        //// i Drawing
        context.saveGState()
        context.translateBy(x: 660.4, y: 110.61)
        context.rotate(by: 11 * CGFloat.pi/180)

        let iPath = UIBezierPath(roundedRect: CGRect(x: -23.5, y: -75, width: 47, height: 150), cornerRadius: 8)
        fillColor5.setFill()
        iPath.fill()

        context.restoreGState()


        //// t Drawing
        let tPath = UIBezierPath()
        tPath.move(to: CGPoint(x: 813.98, y: 82.78))
        tPath.addLine(to: CGPoint(x: 835.14, y: 182.34))
        tPath.addCurve(to: CGPoint(x: 827.45, y: 194.19), controlPoint1: CGPoint(x: 836.29, y: 187.74), controlPoint2: CGPoint(x: 832.85, y: 193.05))
        tPath.addLine(to: CGPoint(x: 807.87, y: 198.36))
        tPath.addCurve(to: CGPoint(x: 796.02, y: 190.66), controlPoint1: CGPoint(x: 802.47, y: 199.5), controlPoint2: CGPoint(x: 797.16, y: 196.05))
        tPath.addLine(to: CGPoint(x: 774.85, y: 91.09))
        tPath.addLine(to: CGPoint(x: 735.73, y: 99.41))
        tPath.addCurve(to: CGPoint(x: 723.87, y: 91.72), controlPoint1: CGPoint(x: 730.32, y: 100.56), controlPoint2: CGPoint(x: 725.01, y: 97.11))
        tPath.addLine(to: CGPoint(x: 720.08, y: 73.88))
        tPath.addCurve(to: CGPoint(x: 727.78, y: 62.03), controlPoint1: CGPoint(x: 718.93, y: 68.48), controlPoint2: CGPoint(x: 722.38, y: 63.18))
        tPath.addLine(to: CGPoint(x: 845.16, y: 37.08))
        tPath.addCurve(to: CGPoint(x: 857.02, y: 44.77), controlPoint1: CGPoint(x: 850.56, y: 35.93), controlPoint2: CGPoint(x: 855.87, y: 39.38))
        tPath.addLine(to: CGPoint(x: 860.81, y: 62.61))
        tPath.addCurve(to: CGPoint(x: 853.11, y: 74.46), controlPoint1: CGPoint(x: 861.96, y: 68.01), controlPoint2: CGPoint(x: 858.5, y: 73.31))
        tPath.addLine(to: CGPoint(x: 813.98, y: 82.78))
        tPath.close()
        tPath.usesEvenOddFillRule = true
        fillColor6.setFill()
        tPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawConnectButton(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 200, height: 230), resizing: ResizingBehavior = .aspectFit, pressedConnectButton: Bool = true) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 200, height: 230), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 200, y: resizedFrame.height / 230)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 200, resizedFrame.height / 230)


        //// Color Declarations
        let fillColor3 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let fillColor7 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        let strokeColor = UIColor(red: 0.949, green: 0.757, blue: 0.180, alpha: 1.000)
        let fillColor8 = UIColor(red: 0.906, green: 0.298, blue: 0.235, alpha: 1.000)
        let textForeground = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 0.777)

        //// Shadow Declarations
        let shadow = NSShadow()
        shadow.shadowColor = KoditSytleKit.fruit_yellow
        shadow.shadowOffset = CGSize(width: 0, height: 0)
        shadow.shadowBlurRadius = 20

        //// Page-1
        //// connectButton 2
        //// Oval-3
        //// path-1 Drawing
        let path1Path = UIBezierPath(ovalIn: CGRect(x: 53, y: 23, width: 109, height: 110))
        fillColor7.setFill()
        path1Path.fill()


        //// path- Drawing
        let pathPath = UIBezierPath(ovalIn: CGRect(x: 53, y: 23, width: 109, height: 110))
        fillColor8.setFill()
        pathPath.fill()
        strokeColor.setStroke()
        pathPath.lineWidth = 12
        pathPath.stroke()




        //// Triangle Drawing
        let trianglePath = UIBezierPath()
        trianglePath.move(to: CGPoint(x: 132.5, y: 79.5))
        trianglePath.addLine(to: CGPoint(x: 95, y: 104))
        trianglePath.addLine(to: CGPoint(x: 95, y: 55))
        trianglePath.addLine(to: CGPoint(x: 132.5, y: 79.5))
        trianglePath.close()
        trianglePath.usesEvenOddFillRule = true
        fillColor3.setFill()
        trianglePath.fill()


        //// Label Drawing
        let labelRect = CGRect(x: 40.62, y: 150, width: 108.84, height: 49)
        let labelStyle = NSMutableParagraphStyle()
        labelStyle.alignment = .left
        let labelFontAttributes = [
            convertFromNSAttributedStringKey(NSAttributedString.Key.font): UIFont(name: "HelveticaNeue-Bold", size: 40)!,
            convertFromNSAttributedStringKey(NSAttributedString.Key.foregroundColor): textForeground,
            convertFromNSAttributedStringKey(NSAttributedString.Key.paragraphStyle): labelStyle,
        ]

        "BaÄla".draw(in: labelRect, withAttributes: convertToOptionalNSAttributedStringKeyDictionary(labelFontAttributes))


        //// Label 2 Drawing
        let label2Rect = CGRect(x: 149.46, y: 150, width: 23.72, height: 49)
        let label2Style = NSMutableParagraphStyle()
        label2Style.alignment = .left
        let label2FontAttributes = [
            convertFromNSAttributedStringKey(NSAttributedString.Key.font): UIFont(name: "HelveticaNeue-Bold", size: 40)!,
            convertFromNSAttributedStringKey(NSAttributedString.Key.foregroundColor): textForeground,
            convertFromNSAttributedStringKey(NSAttributedString.Key.paragraphStyle): label2Style,
        ]

        "n".draw(in: label2Rect, withAttributes: convertToOptionalNSAttributedStringKeyDictionary(label2FontAttributes))






        if (pressedConnectButton) {
            //// Oval Drawing
            let ovalPath = UIBezierPath(ovalIn: CGRect(x: 46, y: 16, width: 123, height: 123))
            context.saveGState()
            context.setShadow(offset: CGSize(width: shadow.shadowOffset.width * resizedShadowScale, height: shadow.shadowOffset.height * resizedShadowScale), blur: shadow.shadowBlurRadius * resizedShadowScale, color: (shadow.shadowColor as! UIColor).cgColor)
            UIColor.white.setStroke()
            ovalPath.lineWidth = 4.5
            ovalPath.stroke()
            context.restoreGState()
        }
        
        context.restoreGState()

    }

    @objc dynamic public class func drawStartBlock(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 150, height: 30), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 150, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 150, y: resizedFrame.height / 30)


        //// Color Declarations
        let textForeground2 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// NLBRBlock---basla
        //// Combined-Shape Drawing
        let combinedShapePath = UIBezierPath()
        combinedShapePath.move(to: CGPoint(x: 36, y: 20))
        combinedShapePath.addLine(to: CGPoint(x: 140, y: 20))
        combinedShapePath.addCurve(to: CGPoint(x: 150, y: 10), controlPoint1: CGPoint(x: 145.53, y: 20), controlPoint2: CGPoint(x: 150, y: 15.52))
        combinedShapePath.addCurve(to: CGPoint(x: 140, y: 0), controlPoint1: CGPoint(x: 150, y: 4.48), controlPoint2: CGPoint(x: 145.52, y: 0))
        combinedShapePath.addLine(to: CGPoint(x: 10, y: 0))
        combinedShapePath.addCurve(to: CGPoint(x: 0, y: 10), controlPoint1: CGPoint(x: 4.47, y: 0), controlPoint2: CGPoint(x: 0, y: 4.48))
        combinedShapePath.addCurve(to: CGPoint(x: 10, y: 20), controlPoint1: CGPoint(x: 0, y: 15.52), controlPoint2: CGPoint(x: 4.48, y: 20))
        combinedShapePath.addLine(to: CGPoint(x: 16, y: 20))
        combinedShapePath.addCurve(to: CGPoint(x: 26, y: 30), controlPoint1: CGPoint(x: 16, y: 25.52), controlPoint2: CGPoint(x: 20.48, y: 30))
        combinedShapePath.addCurve(to: CGPoint(x: 36, y: 20), controlPoint1: CGPoint(x: 31.52, y: 30), controlPoint2: CGPoint(x: 36, y: 25.52))
        combinedShapePath.close()
        combinedShapePath.usesEvenOddFillRule = true
        textForeground2.setFill()
        combinedShapePath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawNLBRBlockileri(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 150, height: 50), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 150, height: 50), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 150, y: resizedFrame.height / 50)


        //// Color Declarations
        let fillColor10 = UIColor(red: 0.745, green: 0.059, blue: 0.059, alpha: 1.000)
        let textForeground2 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Page-1
        //// NLBRBlock---ileri
        //// ileri
        //// Combined-Shape Drawing
        let combinedShapePath = UIBezierPath()
        combinedShapePath.move(to: CGPoint(x: 16, y: 40))
        combinedShapePath.addLine(to: CGPoint(x: 10, y: 40))
        combinedShapePath.addCurve(to: CGPoint(x: 0, y: 30.01), controlPoint1: CGPoint(x: 4.48, y: 40), controlPoint2: CGPoint(x: 0, y: 35.53))
        combinedShapePath.addLine(to: CGPoint(x: 0, y: 9.99))
        combinedShapePath.addCurve(to: CGPoint(x: 10, y: 0), controlPoint1: CGPoint(x: 0, y: 4.47), controlPoint2: CGPoint(x: 4.47, y: 0))
        combinedShapePath.addLine(to: CGPoint(x: 15, y: 0))
        combinedShapePath.addCurve(to: CGPoint(x: 25, y: 10), controlPoint1: CGPoint(x: 15, y: 5.52), controlPoint2: CGPoint(x: 19.48, y: 10))
        combinedShapePath.addCurve(to: CGPoint(x: 35, y: 0), controlPoint1: CGPoint(x: 30.52, y: 10), controlPoint2: CGPoint(x: 35, y: 5.52))
        combinedShapePath.addLine(to: CGPoint(x: 140, y: 0))
        combinedShapePath.addCurve(to: CGPoint(x: 150, y: 9.99), controlPoint1: CGPoint(x: 145.52, y: 0), controlPoint2: CGPoint(x: 150, y: 4.47))
        combinedShapePath.addLine(to: CGPoint(x: 150, y: 30.01))
        combinedShapePath.addCurve(to: CGPoint(x: 140, y: 40), controlPoint1: CGPoint(x: 150, y: 35.53), controlPoint2: CGPoint(x: 145.53, y: 40))
        combinedShapePath.addLine(to: CGPoint(x: 36, y: 40))
        combinedShapePath.addCurve(to: CGPoint(x: 26, y: 50), controlPoint1: CGPoint(x: 36, y: 45.52), controlPoint2: CGPoint(x: 31.52, y: 50))
        combinedShapePath.addCurve(to: CGPoint(x: 16, y: 40), controlPoint1: CGPoint(x: 20.48, y: 50), controlPoint2: CGPoint(x: 16, y: 45.52))
        combinedShapePath.close()
        combinedShapePath.usesEvenOddFillRule = true
        fillColor10.setFill()
        combinedShapePath.fill()


        //// Label Drawing
        let labelRect = CGRect(x: 50, y: 6, width: 57.68, height: 25)
        let labelStyle = NSMutableParagraphStyle()
        labelStyle.alignment = .left
        let labelFontAttributes = [
            convertFromNSAttributedStringKey(NSAttributedString.Key.font): UIFont(name: "HelveticaNeue-Bold", size: 20)!,
            convertFromNSAttributedStringKey(NSAttributedString.Key.foregroundColor): textForeground2,
            convertFromNSAttributedStringKey(NSAttributedString.Key.paragraphStyle): labelStyle,
        ]

        "ileri gi".draw(in: labelRect, withAttributes: convertToOptionalNSAttributedStringKeyDictionary(labelFontAttributes))


        //// Label 2 Drawing
        let label2Rect = CGRect(x: 108.08, y: 6, width: 7.04, height: 25)
        let label2Style = NSMutableParagraphStyle()
        label2Style.alignment = .left
        let label2FontAttributes = [
            convertFromNSAttributedStringKey(NSAttributedString.Key.font): UIFont(name: "HelveticaNeue-Bold", size: 20)!,
            convertFromNSAttributedStringKey(NSAttributedString.Key.foregroundColor): textForeground2,
            convertFromNSAttributedStringKey(NSAttributedString.Key.paragraphStyle): label2Style,
        ]

        "t".draw(in: label2Rect, withAttributes: convertToOptionalNSAttributedStringKeyDictionary(label2FontAttributes))
        
        context.restoreGState()

    }

    @objc dynamic public class func drawNLBRBlocksag(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 150, height: 50), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 150, height: 50), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 150, y: resizedFrame.height / 50)


        //// Color Declarations
        let textForeground2 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let fillColor11 = UIColor(red: 0.557, green: 0.267, blue: 0.678, alpha: 1.000)

        //// Page-1
        //// NLBRBlock---sag 2
        //// saÄ
        //// Combined-Shape Drawing
        let combinedShapePath = UIBezierPath()
        combinedShapePath.move(to: CGPoint(x: 16, y: 40))
        combinedShapePath.addLine(to: CGPoint(x: 10, y: 40))
        combinedShapePath.addCurve(to: CGPoint(x: 0, y: 30.01), controlPoint1: CGPoint(x: 4.48, y: 40), controlPoint2: CGPoint(x: 0, y: 35.53))
        combinedShapePath.addLine(to: CGPoint(x: 0, y: 9.99))
        combinedShapePath.addCurve(to: CGPoint(x: 10, y: 0), controlPoint1: CGPoint(x: 0, y: 4.47), controlPoint2: CGPoint(x: 4.47, y: 0))
        combinedShapePath.addLine(to: CGPoint(x: 15, y: 0))
        combinedShapePath.addCurve(to: CGPoint(x: 25, y: 10), controlPoint1: CGPoint(x: 15, y: 5.52), controlPoint2: CGPoint(x: 19.48, y: 10))
        combinedShapePath.addCurve(to: CGPoint(x: 35, y: 0), controlPoint1: CGPoint(x: 30.52, y: 10), controlPoint2: CGPoint(x: 35, y: 5.52))
        combinedShapePath.addLine(to: CGPoint(x: 140, y: 0))
        combinedShapePath.addCurve(to: CGPoint(x: 150, y: 9.99), controlPoint1: CGPoint(x: 145.52, y: 0), controlPoint2: CGPoint(x: 150, y: 4.47))
        combinedShapePath.addLine(to: CGPoint(x: 150, y: 30.01))
        combinedShapePath.addCurve(to: CGPoint(x: 140, y: 40), controlPoint1: CGPoint(x: 150, y: 35.53), controlPoint2: CGPoint(x: 145.53, y: 40))
        combinedShapePath.addLine(to: CGPoint(x: 36, y: 40))
        combinedShapePath.addCurve(to: CGPoint(x: 26, y: 50), controlPoint1: CGPoint(x: 36, y: 45.52), controlPoint2: CGPoint(x: 31.52, y: 50))
        combinedShapePath.addCurve(to: CGPoint(x: 16, y: 40), controlPoint1: CGPoint(x: 20.48, y: 50), controlPoint2: CGPoint(x: 16, y: 45.52))
        combinedShapePath.close()
        combinedShapePath.usesEvenOddFillRule = true
        fillColor11.setFill()
        combinedShapePath.fill()


        //// Label Drawing
        let labelRect = CGRect(x: 50, y: 6, width: 75.92, height: 25)
        let labelStyle = NSMutableParagraphStyle()
        labelStyle.alignment = .left
        let labelFontAttributes = [
            convertFromNSAttributedStringKey(NSAttributedString.Key.font): UIFont(name: "HelveticaNeue-Bold", size: 20)!,
            convertFromNSAttributedStringKey(NSAttributedString.Key.foregroundColor): textForeground2,
            convertFromNSAttributedStringKey(NSAttributedString.Key.paragraphStyle): labelStyle,
        ]

        "saÄa dÃ¶".draw(in: labelRect, withAttributes: convertToOptionalNSAttributedStringKeyDictionary(labelFontAttributes))


        //// Label 2 Drawing
        let label2Rect = CGRect(x: 125.52, y: 6, width: 11.86, height: 25)
        let label2Style = NSMutableParagraphStyle()
        label2Style.alignment = .left
        let label2FontAttributes = [
            convertFromNSAttributedStringKey(NSAttributedString.Key.font): UIFont(name: "HelveticaNeue-Bold", size: 20)!,
            convertFromNSAttributedStringKey(NSAttributedString.Key.foregroundColor): textForeground2,
            convertFromNSAttributedStringKey(NSAttributedString.Key.paragraphStyle): label2Style,
        ]

        "n".draw(in: label2Rect, withAttributes: convertToOptionalNSAttributedStringKeyDictionary(label2FontAttributes))
        
        context.restoreGState()

    }

    @objc dynamic public class func drawNLBRBlocksol(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 150, height: 50), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 150, height: 50), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 150, y: resizedFrame.height / 50)


        //// Color Declarations
        let fillColor8 = UIColor(red: 0.906, green: 0.298, blue: 0.235, alpha: 1.000)
        let textForeground2 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Page-1
        //// NLBRBlock---sag 2
        //// sol
        //// Combined-Shape Drawing
        let combinedShapePath = UIBezierPath()
        combinedShapePath.move(to: CGPoint(x: 16, y: 40))
        combinedShapePath.addLine(to: CGPoint(x: 10, y: 40))
        combinedShapePath.addCurve(to: CGPoint(x: 0, y: 30.01), controlPoint1: CGPoint(x: 4.48, y: 40), controlPoint2: CGPoint(x: 0, y: 35.53))
        combinedShapePath.addLine(to: CGPoint(x: 0, y: 9.99))
        combinedShapePath.addCurve(to: CGPoint(x: 10, y: 0), controlPoint1: CGPoint(x: 0, y: 4.47), controlPoint2: CGPoint(x: 4.47, y: 0))
        combinedShapePath.addLine(to: CGPoint(x: 15, y: 0))
        combinedShapePath.addCurve(to: CGPoint(x: 25, y: 10), controlPoint1: CGPoint(x: 15, y: 5.52), controlPoint2: CGPoint(x: 19.48, y: 10))
        combinedShapePath.addCurve(to: CGPoint(x: 35, y: 0), controlPoint1: CGPoint(x: 30.52, y: 10), controlPoint2: CGPoint(x: 35, y: 5.52))
        combinedShapePath.addLine(to: CGPoint(x: 140, y: 0))
        combinedShapePath.addCurve(to: CGPoint(x: 150, y: 9.99), controlPoint1: CGPoint(x: 145.52, y: 0), controlPoint2: CGPoint(x: 150, y: 4.47))
        combinedShapePath.addLine(to: CGPoint(x: 150, y: 30.01))
        combinedShapePath.addCurve(to: CGPoint(x: 140, y: 40), controlPoint1: CGPoint(x: 150, y: 35.53), controlPoint2: CGPoint(x: 145.53, y: 40))
        combinedShapePath.addLine(to: CGPoint(x: 36, y: 40))
        combinedShapePath.addCurve(to: CGPoint(x: 26, y: 50), controlPoint1: CGPoint(x: 36, y: 45.52), controlPoint2: CGPoint(x: 31.52, y: 50))
        combinedShapePath.addCurve(to: CGPoint(x: 16, y: 40), controlPoint1: CGPoint(x: 20.48, y: 50), controlPoint2: CGPoint(x: 16, y: 45.52))
        combinedShapePath.close()
        combinedShapePath.usesEvenOddFillRule = true
        fillColor8.setFill()
        combinedShapePath.fill()


        //// Label Drawing
        let labelRect = CGRect(x: 50, y: 6, width: 69.6, height: 25)
        let labelStyle = NSMutableParagraphStyle()
        labelStyle.alignment = .left
        let labelFontAttributes = [
            convertFromNSAttributedStringKey(NSAttributedString.Key.font): UIFont(name: "HelveticaNeue-Bold", size: 20)!,
            convertFromNSAttributedStringKey(NSAttributedString.Key.foregroundColor): textForeground2,
            convertFromNSAttributedStringKey(NSAttributedString.Key.paragraphStyle): labelStyle,
        ]

        "sola dÃ¶".draw(in: labelRect, withAttributes: convertToOptionalNSAttributedStringKeyDictionary(labelFontAttributes))


        //// Label 2 Drawing
        let label2Rect = CGRect(x: 119.2, y: 6, width: 11.86, height: 25)
        let label2Style = NSMutableParagraphStyle()
        label2Style.alignment = .left
        let label2FontAttributes = [
            convertFromNSAttributedStringKey(NSAttributedString.Key.font): UIFont(name: "HelveticaNeue-Bold", size: 20)!,
            convertFromNSAttributedStringKey(NSAttributedString.Key.foregroundColor): textForeground2,
            convertFromNSAttributedStringKey(NSAttributedString.Key.paragraphStyle): label2Style,
        ]

        "n".draw(in: label2Rect, withAttributes: convertToOptionalNSAttributedStringKeyDictionary(label2FontAttributes))
        
        context.restoreGState()

    }

    @objc dynamic public class func drawNLBRBlockgeri(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 150, height: 50), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 150, height: 50), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 150, y: resizedFrame.height / 50)


        //// Color Declarations
        let textForeground2 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let fillColor12 = UIColor(red: 0.180, green: 0.800, blue: 0.443, alpha: 1.000)

        //// Page-1
        //// NLBRBlock---geri 2
        //// geri
        //// Combined-Shape Drawing
        let combinedShapePath = UIBezierPath()
        combinedShapePath.move(to: CGPoint(x: 16, y: 40))
        combinedShapePath.addLine(to: CGPoint(x: 10, y: 40))
        combinedShapePath.addCurve(to: CGPoint(x: 0, y: 30.01), controlPoint1: CGPoint(x: 4.48, y: 40), controlPoint2: CGPoint(x: 0, y: 35.53))
        combinedShapePath.addLine(to: CGPoint(x: 0, y: 9.99))
        combinedShapePath.addCurve(to: CGPoint(x: 10, y: 0), controlPoint1: CGPoint(x: 0, y: 4.47), controlPoint2: CGPoint(x: 4.47, y: 0))
        combinedShapePath.addLine(to: CGPoint(x: 15, y: 0))
        combinedShapePath.addCurve(to: CGPoint(x: 25, y: 10), controlPoint1: CGPoint(x: 15, y: 5.52), controlPoint2: CGPoint(x: 19.48, y: 10))
        combinedShapePath.addCurve(to: CGPoint(x: 35, y: 0), controlPoint1: CGPoint(x: 30.52, y: 10), controlPoint2: CGPoint(x: 35, y: 5.52))
        combinedShapePath.addLine(to: CGPoint(x: 140, y: 0))
        combinedShapePath.addCurve(to: CGPoint(x: 150, y: 9.99), controlPoint1: CGPoint(x: 145.52, y: 0), controlPoint2: CGPoint(x: 150, y: 4.47))
        combinedShapePath.addLine(to: CGPoint(x: 150, y: 30.01))
        combinedShapePath.addCurve(to: CGPoint(x: 140, y: 40), controlPoint1: CGPoint(x: 150, y: 35.53), controlPoint2: CGPoint(x: 145.53, y: 40))
        combinedShapePath.addLine(to: CGPoint(x: 36, y: 40))
        combinedShapePath.addCurve(to: CGPoint(x: 26, y: 50), controlPoint1: CGPoint(x: 36, y: 45.52), controlPoint2: CGPoint(x: 31.52, y: 50))
        combinedShapePath.addCurve(to: CGPoint(x: 16, y: 40), controlPoint1: CGPoint(x: 20.48, y: 50), controlPoint2: CGPoint(x: 16, y: 45.52))
        combinedShapePath.close()
        combinedShapePath.usesEvenOddFillRule = true
        fillColor12.setFill()
        combinedShapePath.fill()


        //// Label Drawing
        let labelRect = CGRect(x: 50, y: 6, width: 59.58, height: 25)
        let labelStyle = NSMutableParagraphStyle()
        labelStyle.alignment = .left
        let labelFontAttributes = [
            convertFromNSAttributedStringKey(NSAttributedString.Key.font): UIFont(name: "HelveticaNeue-Bold", size: 20)!,
            convertFromNSAttributedStringKey(NSAttributedString.Key.foregroundColor): textForeground2,
            convertFromNSAttributedStringKey(NSAttributedString.Key.paragraphStyle): labelStyle,
        ]

        "geri gi".draw(in: labelRect, withAttributes: convertToOptionalNSAttributedStringKeyDictionary(labelFontAttributes))


        //// Label 2 Drawing
        let label2Rect = CGRect(x: 109.18, y: 6, width: 7.04, height: 25)
        let label2Style = NSMutableParagraphStyle()
        label2Style.alignment = .left
        let label2FontAttributes = [
            convertFromNSAttributedStringKey(NSAttributedString.Key.font): UIFont(name: "HelveticaNeue-Bold", size: 20)!,
            convertFromNSAttributedStringKey(NSAttributedString.Key.foregroundColor): textForeground2,
            convertFromNSAttributedStringKey(NSAttributedString.Key.paragraphStyle): label2Style,
        ]

        "t".draw(in: label2Rect, withAttributes: convertToOptionalNSAttributedStringKeyDictionary(label2FontAttributes))
        
        context.restoreGState()

    }

    @objc dynamic public class func drawKomutBlockses(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 150, height: 50), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 150, height: 50), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 150, y: resizedFrame.height / 50)


        //// Color Declarations
        let textForeground2 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let fillColor14 = UIColor(red: 0.180, green: 0.216, blue: 0.800, alpha: 1.000)

        //// Page-1
        //// KomutBlock---ses 2
        //// ses
        //// Combined-Shape Drawing
        let combinedShapePath = UIBezierPath()
        combinedShapePath.move(to: CGPoint(x: 16, y: 40))
        combinedShapePath.addLine(to: CGPoint(x: 10, y: 40))
        combinedShapePath.addCurve(to: CGPoint(x: 0, y: 30.01), controlPoint1: CGPoint(x: 4.48, y: 40), controlPoint2: CGPoint(x: 0, y: 35.53))
        combinedShapePath.addLine(to: CGPoint(x: 0, y: 9.99))
        combinedShapePath.addCurve(to: CGPoint(x: 10, y: 0), controlPoint1: CGPoint(x: 0, y: 4.47), controlPoint2: CGPoint(x: 4.47, y: 0))
        combinedShapePath.addLine(to: CGPoint(x: 15, y: 0))
        combinedShapePath.addCurve(to: CGPoint(x: 25, y: 10), controlPoint1: CGPoint(x: 15, y: 5.52), controlPoint2: CGPoint(x: 19.48, y: 10))
        combinedShapePath.addCurve(to: CGPoint(x: 35, y: 0), controlPoint1: CGPoint(x: 30.52, y: 10), controlPoint2: CGPoint(x: 35, y: 5.52))
        combinedShapePath.addLine(to: CGPoint(x: 140, y: 0))
        combinedShapePath.addCurve(to: CGPoint(x: 150, y: 9.99), controlPoint1: CGPoint(x: 145.52, y: 0), controlPoint2: CGPoint(x: 150, y: 4.47))
        combinedShapePath.addLine(to: CGPoint(x: 150, y: 30.01))
        combinedShapePath.addCurve(to: CGPoint(x: 140, y: 40), controlPoint1: CGPoint(x: 150, y: 35.53), controlPoint2: CGPoint(x: 145.53, y: 40))
        combinedShapePath.addLine(to: CGPoint(x: 36, y: 40))
        combinedShapePath.addCurve(to: CGPoint(x: 26, y: 50), controlPoint1: CGPoint(x: 36, y: 45.52), controlPoint2: CGPoint(x: 31.52, y: 50))
        combinedShapePath.addCurve(to: CGPoint(x: 16, y: 40), controlPoint1: CGPoint(x: 20.48, y: 50), controlPoint2: CGPoint(x: 16, y: 45.52))
        combinedShapePath.close()
        combinedShapePath.usesEvenOddFillRule = true
        fillColor14.setFill()
        combinedShapePath.fill()


        //// Label Drawing
        let labelRect = CGRect(x: 50, y: 6, width: 85.9, height: 25)
        let labelStyle = NSMutableParagraphStyle()
        labelStyle.alignment = .left
        let labelFontAttributes = [
            convertFromNSAttributedStringKey(NSAttributedString.Key.font): UIFont(name: "HelveticaNeue-Bold", size: 20)!,
            convertFromNSAttributedStringKey(NSAttributedString.Key.foregroundColor): textForeground2,
            convertFromNSAttributedStringKey(NSAttributedString.Key.paragraphStyle): labelStyle,
        ]

        "ses Ã§Ä±kar".draw(in: labelRect, withAttributes: convertToOptionalNSAttributedStringKeyDictionary(labelFontAttributes))
        
        context.restoreGState()

    }

    @objc dynamic public class func drawKomutBlockled(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 150, height: 50), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 150, height: 50), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 150, y: resizedFrame.height / 50)


        //// Color Declarations
        let textForeground2 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let fillColor13 = UIColor(red: 0.208, green: 0.937, blue: 0.259, alpha: 1.000)

        //// Page-1
        //// NLBRBlock---led
        //// ses
        //// Combined-Shape Drawing
        let combinedShapePath = UIBezierPath()
        combinedShapePath.move(to: CGPoint(x: 16, y: 40))
        combinedShapePath.addLine(to: CGPoint(x: 10, y: 40))
        combinedShapePath.addCurve(to: CGPoint(x: 0, y: 30.01), controlPoint1: CGPoint(x: 4.48, y: 40), controlPoint2: CGPoint(x: 0, y: 35.53))
        combinedShapePath.addLine(to: CGPoint(x: 0, y: 9.99))
        combinedShapePath.addCurve(to: CGPoint(x: 10, y: 0), controlPoint1: CGPoint(x: 0, y: 4.47), controlPoint2: CGPoint(x: 4.47, y: 0))
        combinedShapePath.addLine(to: CGPoint(x: 15, y: 0))
        combinedShapePath.addCurve(to: CGPoint(x: 25, y: 10), controlPoint1: CGPoint(x: 15, y: 5.52), controlPoint2: CGPoint(x: 19.48, y: 10))
        combinedShapePath.addCurve(to: CGPoint(x: 35, y: 0), controlPoint1: CGPoint(x: 30.52, y: 10), controlPoint2: CGPoint(x: 35, y: 5.52))
        combinedShapePath.addLine(to: CGPoint(x: 140, y: 0))
        combinedShapePath.addCurve(to: CGPoint(x: 150, y: 9.99), controlPoint1: CGPoint(x: 145.52, y: 0), controlPoint2: CGPoint(x: 150, y: 4.47))
        combinedShapePath.addLine(to: CGPoint(x: 150, y: 30.01))
        combinedShapePath.addCurve(to: CGPoint(x: 140, y: 40), controlPoint1: CGPoint(x: 150, y: 35.53), controlPoint2: CGPoint(x: 145.53, y: 40))
        combinedShapePath.addLine(to: CGPoint(x: 36, y: 40))
        combinedShapePath.addCurve(to: CGPoint(x: 26, y: 50), controlPoint1: CGPoint(x: 36, y: 45.52), controlPoint2: CGPoint(x: 31.52, y: 50))
        combinedShapePath.addCurve(to: CGPoint(x: 16, y: 40), controlPoint1: CGPoint(x: 20.48, y: 50), controlPoint2: CGPoint(x: 16, y: 45.52))
        combinedShapePath.close()
        combinedShapePath.usesEvenOddFillRule = true
        fillColor13.setFill()
        combinedShapePath.fill()


        //// Label Drawing
        let labelRect = CGRect(x: 50, y: 6, width: 67.76, height: 25)
        let labelStyle = NSMutableParagraphStyle()
        labelStyle.alignment = .left
        let labelFontAttributes = [
            convertFromNSAttributedStringKey(NSAttributedString.Key.font): UIFont(name: "HelveticaNeue-Bold", size: 20)!,
            convertFromNSAttributedStringKey(NSAttributedString.Key.foregroundColor): textForeground2,
            convertFromNSAttributedStringKey(NSAttributedString.Key.paragraphStyle): labelStyle,
        ]

        "led yak".draw(in: labelRect, withAttributes: convertToOptionalNSAttributedStringKeyDictionary(labelFontAttributes))
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSendButton(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 120, height: 120), resizing: ResizingBehavior = .aspectFit, startAnimationConnectButton: Bool = true, angleOfRotationConnectButton: CGFloat = 0, unPressedSendButton: Bool = true) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 120, height: 120), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 120, y: resizedFrame.height / 120)


        //// Color Declarations
        let fillColor8 = UIColor(red: 0.906, green: 0.298, blue: 0.235, alpha: 1.000)
        let strokeColor2 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Page-1
        //// gÃ¶nderButton
        //// sendButton
        //// Oval-3 Drawing
        let oval3Path = UIBezierPath(ovalIn: CGRect(x: 5, y: 5, width: 110, height: 110))
        fillColor8.setFill()
        oval3Path.fill()
        strokeColor2.setStroke()
        oval3Path.lineWidth = 9
        oval3Path.stroke()








        if (startAnimationConnectButton) {
            //// animation_line Drawing
            context.saveGState()
            context.translateBy(x: 60, y: 60)
            context.rotate(by: -angleOfRotationConnectButton * CGFloat.pi/180)

            let animation_lineRect = CGRect(x: -55, y: -55, width: 110, height: 110)
            let animation_linePath = UIBezierPath()
            animation_linePath.addArc(withCenter: CGPoint(x: animation_lineRect.midX, y: animation_lineRect.midY), radius: animation_lineRect.width / 2, startAngle: -90 * CGFloat.pi/180, endAngle: -34 * CGFloat.pi/180, clockwise: true)

            UIColor.clear.setFill()
            animation_linePath.fill()
            KoditSytleKit.mainBackground.setStroke()
            animation_linePath.lineWidth = 9
            animation_linePath.lineCapStyle = .round
            animation_linePath.lineJoinStyle = .bevel
            animation_linePath.stroke()

            context.restoreGState()
        }


        if (unPressedSendButton) {
            //// Triangle Drawing
            context.saveGState()
            context.setBlendMode(.lighten)

            let trianglePath = UIBezierPath()
            trianglePath.move(to: CGPoint(x: 86.51, y: 61.26))
            trianglePath.addCurve(to: CGPoint(x: 47.87, y: 84.65), controlPoint1: CGPoint(x: 86.51, y: 67.24), controlPoint2: CGPoint(x: 47.87, y: 84.65))
            trianglePath.addCurve(to: CGPoint(x: 46.81, y: 84.65), controlPoint1: CGPoint(x: 47.87, y: 84.65), controlPoint2: CGPoint(x: 47.16, y: 84.89))
            trianglePath.addCurve(to: CGPoint(x: 46.56, y: 83.73), controlPoint1: CGPoint(x: 46.5, y: 84.43), controlPoint2: CGPoint(x: 46.56, y: 83.73))
            trianglePath.addLine(to: CGPoint(x: 46.56, y: 39.22))
            trianglePath.addCurve(to: CGPoint(x: 47.17, y: 36.68), controlPoint1: CGPoint(x: 46.56, y: 37.5), controlPoint2: CGPoint(x: 46.48, y: 37.15))
            trianglePath.addCurve(to: CGPoint(x: 49.54, y: 37.2), controlPoint1: CGPoint(x: 47.97, y: 36.14), controlPoint2: CGPoint(x: 49.54, y: 37.2))
            trianglePath.addCurve(to: CGPoint(x: 86.51, y: 61.26), controlPoint1: CGPoint(x: 49.54, y: 37.2), controlPoint2: CGPoint(x: 86.51, y: 55.67))
            trianglePath.close()
            trianglePath.usesEvenOddFillRule = true
            UIColor.white.setFill()
            trianglePath.fill()

            context.restoreGState()
        }


        //// Triangle 2 Drawing
        context.saveGState()
        context.setBlendMode(.lighten)

        let triangle2Path = UIBezierPath()
        triangle2Path.move(to: CGPoint(x: 86.51, y: 61.26))
        triangle2Path.addCurve(to: CGPoint(x: 47.87, y: 84.65), controlPoint1: CGPoint(x: 86.51, y: 67.24), controlPoint2: CGPoint(x: 47.87, y: 84.65))
        triangle2Path.addCurve(to: CGPoint(x: 46.81, y: 84.65), controlPoint1: CGPoint(x: 47.87, y: 84.65), controlPoint2: CGPoint(x: 47.16, y: 84.89))
        triangle2Path.addCurve(to: CGPoint(x: 46.56, y: 83.73), controlPoint1: CGPoint(x: 46.5, y: 84.43), controlPoint2: CGPoint(x: 46.56, y: 83.73))
        triangle2Path.addLine(to: CGPoint(x: 46.56, y: 39.22))
        triangle2Path.addCurve(to: CGPoint(x: 47.17, y: 36.68), controlPoint1: CGPoint(x: 46.56, y: 37.5), controlPoint2: CGPoint(x: 46.48, y: 37.15))
        triangle2Path.addCurve(to: CGPoint(x: 49.54, y: 37.2), controlPoint1: CGPoint(x: 47.97, y: 36.14), controlPoint2: CGPoint(x: 49.54, y: 37.2))
        triangle2Path.addCurve(to: CGPoint(x: 86.51, y: 61.26), controlPoint1: CGPoint(x: 49.54, y: 37.2), controlPoint2: CGPoint(x: 86.51, y: 55.67))
        triangle2Path.close()
        triangle2Path.usesEvenOddFillRule = true
        KoditSytleKit.mainBackground.setFill()
        triangle2Path.fill()

        context.restoreGState()
        
        context.restoreGState()

    }

    //// Generated Images

    @objc dynamic public class var imageOfKoditName: UIImage {
        if Cache.imageOfKoditName != nil {
            return Cache.imageOfKoditName!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 860, height: 215), false, 0)
            KoditSytleKit.drawKoditName()

        Cache.imageOfKoditName = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfKoditName!
    }

    @objc dynamic public class func imageOfConnectButton(pressedConnectButton: Bool = true) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 200, height: 230), false, 0)
            KoditSytleKit.drawConnectButton(pressedConnectButton: pressedConnectButton)

        let imageOfConnectButton = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfConnectButton
    }

    //// Customization Infrastructure

    @objc @IBOutlet dynamic var koditNameTargets: [AnyObject]! {
        get { return Cache.koditNameTargets }
        set {
            Cache.koditNameTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: KoditSytleKit.imageOfKoditName)
            }
        }
    }




    @objc(KoditSytleKitResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}



private extension UIColor {
    func withHue(_ newHue: CGFloat) -> UIColor {
        var saturation: CGFloat = 1, brightness: CGFloat = 1, alpha: CGFloat = 1
        self.getHue(nil, saturation: &saturation, brightness: &brightness, alpha: &alpha)
        return UIColor(hue: newHue, saturation: saturation, brightness: brightness, alpha: alpha)
    }
    func withSaturation(_ newSaturation: CGFloat) -> UIColor {
        var hue: CGFloat = 1, brightness: CGFloat = 1, alpha: CGFloat = 1
        self.getHue(&hue, saturation: nil, brightness: &brightness, alpha: &alpha)
        return UIColor(hue: hue, saturation: newSaturation, brightness: brightness, alpha: alpha)
    }
    func withBrightness(_ newBrightness: CGFloat) -> UIColor {
        var hue: CGFloat = 1, saturation: CGFloat = 1, alpha: CGFloat = 1
        self.getHue(&hue, saturation: &saturation, brightness: nil, alpha: &alpha)
        return UIColor(hue: hue, saturation: saturation, brightness: newBrightness, alpha: alpha)
    }
    func withAlpha(_ newAlpha: CGFloat) -> UIColor {
        var hue: CGFloat = 1, saturation: CGFloat = 1, brightness: CGFloat = 1
        self.getHue(&hue, saturation: &saturation, brightness: &brightness, alpha: nil)
        return UIColor(hue: hue, saturation: saturation, brightness: brightness, alpha: newAlpha)
    }
    func highlight(withLevel highlight: CGFloat) -> UIColor {
        var red: CGFloat = 1, green: CGFloat = 1, blue: CGFloat = 1, alpha: CGFloat = 1
        self.getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return UIColor(red: red * (1-highlight) + highlight, green: green * (1-highlight) + highlight, blue: blue * (1-highlight) + highlight, alpha: alpha * (1-highlight) + highlight)
    }
    func shadow(withLevel shadow: CGFloat) -> UIColor {
        var red: CGFloat = 1, green: CGFloat = 1, blue: CGFloat = 1, alpha: CGFloat = 1
        self.getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return UIColor(red: red * (1-shadow), green: green * (1-shadow), blue: blue * (1-shadow), alpha: alpha * (1-shadow) + shadow)
    }
}

// Helper function inserted by Swift 4.2 migrator.
fileprivate func convertFromNSAttributedStringKey(_ input: NSAttributedString.Key) -> String {
	return input.rawValue
}

// Helper function inserted by Swift 4.2 migrator.
fileprivate func convertToOptionalNSAttributedStringKeyDictionary(_ input: [String: Any]?) -> [NSAttributedString.Key: Any]? {
	guard let input = input else { return nil }
	return Dictionary(uniqueKeysWithValues: input.map { key, value in (NSAttributedString.Key(rawValue: key), value)})
}
